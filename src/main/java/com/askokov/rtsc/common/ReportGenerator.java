package com.askokov.rtsc.common;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Date;

import android.content.Context;
import android.os.Environment;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class ReportGenerator {
    private static final String FONT_PATH = "/assets/fonts/DroidSans.ttf";

    private Font catFont;
    private Font redFont;
    private Font subFont;
    private Font smallBold;

    public ReportGenerator() throws Exception {
        //BaseFont baseFont = BaseFont.createFont("/system/fonts/Comic.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        BaseFont baseFont = BaseFont.createFont(FONT_PATH, "CP1251", BaseFont.EMBEDDED);
        catFont = new Font(baseFont, 18, Font.BOLD);
        redFont = new Font(baseFont, 12, Font.NORMAL, BaseColor.RED);
        subFont = new Font(baseFont, 16, Font.BOLD);
        smallBold = new Font(baseFont, 12, Font.BOLD);
    }

    public String createPDF(String fileName, Context context) throws Exception {
        final String APPLICATION_PACKAGE_NAME = context.getPackageName();
        File path = new File(Environment.getExternalStorageDirectory(), APPLICATION_PACKAGE_NAME);
        if (!path.exists()) {
            path.mkdir();
        }
        File file = new File(path, fileName);

        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(file));
        document.open();
        addMetaData(document);
        addTitlePage(document);
        addContent(document);
        document.close();

        return file.getAbsolutePath();
    }


    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Алексей Скоков");
    }

    private void addTitlePage(Document document)
        throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Заголовок отчета / Report Title", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Отчет создан: " + new Date(), smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph("Краткая информация об отчете / Report brief info", smallBold));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph("Соглашение о неразглашении", redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("Глава I / Chapter I", catFont);
        anchor.setName("Глава I / Chapter I");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Подкатегория 1 / Subcategory I", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Привет / Hello", subFont));

        subPara = new Paragraph("Подкатегория 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Параграф 1", subFont));
        subCatPart.add(new Paragraph("Параграф 2", subFont));
        subCatPart.add(new Paragraph("Параграф 3", subFont));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Глава II", catFont);
        anchor.setName("Глава II");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Подкатегория", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Важное сообщение", subFont));

        // now add all this to the document
        document.add(catPart);

    }

    private void createTable(Section subCatPart)
        throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Заголовок таблицы 1 / Table header 1", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Заголовок таблицы 2 / Table header 2", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Заголовок таблицы 3 / Table header 3", subFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    private void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("Текст 1 / Text 1", subFont));
        list.add(new ListItem("Текст 2 / Text 2", subFont));
        list.add(new ListItem("Текст 3 / Text 3", subFont));
        subCatPart.add(list);
    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" ", subFont));
        }
    }
}
